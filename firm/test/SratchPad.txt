-------------------------------------------------------------------------------------------------------------------------------------

                          result-oriented actions, individual talent and effective team work 

-------------------------------------------------------------------------------------------------------------------------------------

   - Time taken to save 1 Network to FFat: 3993
   - Time taken to save 1 Network to FFat: 4138
   - Time taken to save 1 Network to FFat: 4124




-------------------------------------------------------------------------------------------------------------------------------------
-------------- useful code ----------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
    
    // in HMI TASK
    // Issue #11 - For Screen Saver PC connection
    // lucas
    if (I[0]){           
      screenServer();
      delay(1000);   
    }

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

  #define GFXFF 1
  #define GLCD  0
  #define FONT2 2

  tft.setTextColor(WHITE2);                        // Font Color
  tft.setTextSize(1);                              // Font size multiplier
  tft.setTextFont(1);                              // Font type
  tft.setFreeFont(FSSB12);                         // Special Font selection
  tft.drawCentreString("Test Font", x, y, 2);      // 2 = size when no Special Font slected. Print command, string will be centered for the given x value
  tft.drawCentreString("Test Font", x, y, GFXFF);  // GFXFF when setFreeFont performed. Print command, string will be centered for the given x value

  tft.drawString("Test Font", x, y, GFXFF);        // Print command, string will be left aligned
  tft.drawString("Test Font", x, y, GFXFF);        // Print command, string will be left aligned

  tft.setTextFont(1);                              // Go back to default font

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

  //Update fields periodically
  unsigned long auxloop = millis();
  if (millis() - auxloop > 2000){
    auxloop = millis();
    Serial.println("Loop WIFI");
  }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

  unsigned long StartTime = micros();
      INSTRUCTION TO MEASURE TIME
  unsigned long CurrentTime = micros();

  Serial.print("   - Time taken to Perform XXX Operation: ");
  Serial.println(CurrentTime - StartTime);

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

  // To configure logging output per module at runtime, add calls to the function esp_log_level_set() as follows:

  esp_log_level_set("*", ESP_LOG_ERROR);        // set all components to ERROR level

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// WiFi Call back back for disconnection reasons
// Disconnection Reasons:
//
// WIFI_REASON_UNSPECIFIED              = 1,
// WIFI_REASON_AUTH_EXPIRE              = 2,
// WIFI_REASON_AUTH_LEAVE               = 3,
// WIFI_REASON_ASSOC_EXPIRE             = 4,
// WIFI_REASON_ASSOC_TOOMANY            = 5,
// WIFI_REASON_NOT_AUTHED               = 6,
// WIFI_REASON_NOT_ASSOCED              = 7,
// WIFI_REASON_ASSOC_LEAVE              = 8,
// WIFI_REASON_ASSOC_NOT_AUTHED         = 9,
// WIFI_REASON_DISASSOC_PWRCAP_BAD      = 10,
// WIFI_REASON_DISASSOC_SUPCHAN_BAD     = 11,
// WIFI_REASON_IE_INVALID               = 13,
// WIFI_REASON_MIC_FAILURE              = 14,
// WIFI_REASON_4WAY_HANDSHAKE_TIMEOUT   = 15,
// WIFI_REASON_GROUP_KEY_UPDATE_TIMEOUT = 16,
// WIFI_REASON_IE_IN_4WAY_DIFFERS       = 17,
// WIFI_REASON_GROUP_CIPHER_INVALID     = 18,
// WIFI_REASON_PAIRWISE_CIPHER_INVALID  = 19,
// WIFI_REASON_AKMP_INVALID             = 20,
// WIFI_REASON_UNSUPP_RSN_IE_VERSION    = 21,
// WIFI_REASON_INVALID_RSN_IE_CAP       = 22,
// WIFI_REASON_802_1X_AUTH_FAILED       = 23,
// WIFI_REASON_CIPHER_SUITE_REJECTED    = 24,
// WIFI_REASON_BEACON_TIMEOUT           = 200,
// WIFI_REASON_NO_AP_FOUND              = 201,
// WIFI_REASON_AUTH_FAIL                = 202,
// WIFI_REASON_ASSOC_FAIL               = 203,
// WIFI_REASON_HANDSHAKE_TIMEOUT        = 204,
//--------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

// Get free heap current and historical minimim
Serial.print("   - Free ESP Miniumn memory ever available: ");
Serial.println (esp_get_minimum_free_heap_size());
Serial.print("   - Free ESP memory xPort: ");
Serial.println(xPortGetFreeHeapSize());

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

#include "FS.h"
#include "SD.h"

Serial.print("Info SD Total Bytes: ");
Serial.println(uint32_t(SD.totalBytes()/1000));
Serial.print("Info SD Used Bytes: ");
Serial.println(uint32_t(SD.usedBytes()/1000));
Serial.print("Card Size: ");
Serial.println(uint32_t(SD.cardSize()/1000));
Serial.print("Card Type: ");
Serial.println(SD.cardType());
      
if (!SD.begin (SD_CS)){
  Serial.println("Card not present");
//   if (SD.cardType() == CARD_NONE){
}
else{
  Serial.println("Card is present. File created");
  
  File fSD = SD.open("/f.txt", "w");
        
  unsigned long CurrentTime = micros();
  Serial.print("Time taken to open file to write: ");
  Serial.println(CurrentTime - StartTime);

  // if mode is SeekSet, position is set to offset bytes from the beginning.
  // if mode is SeekCur, current position is moved by offset bytes.

  if(myFile.seek(pos-1, SeekSet)){
    Serial.println(" Position in File reached");
  }
  else{
    Serial.println(" Position in File Not reached");
  }
  Serial.print("Position in File: ");
  Serial.println(myFile.position());
  Serial.print("File Size: ");
  Serial.println(myFile.size());

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

String stringOne = "Hello String";                      // using a constant String
String stringOne =  String('a');                        // converting a constant char into a String
String stringTwo =  String("This is a string");         // converting a constant string into a String object
String stringOne =  String(stringTwo + " with more");   // concatenating two strings
String stringOne =  String(13);                         // using a constant integer
String stringOne =  String(analogRead(0), DEC);         // using an int and a base
String stringOne =  String(45, HEX);                    // using an int and a base (hexadecimal)
String stringOne =  String(255, BIN);                   // using an int and a base (binary)
String stringOne =  String(millis(), DEC);              // using a long and a base
String stringOne =  String(5.698, 3);                   // using a float and the decimal places 


-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

	// I2C
	#include <Arduino.h>
	#include <Wire.h>
	
	  Adafruit_PWMServoDriver pwm1 = Adafruit_PWMServoDriver(&Wire, 0x40);
	
	
  setup	  pwm1.begin();
	  pwm1.setPWMFreq(1600);  // This is the maximum PWM frequency
	
      loop	    Val1 += 10;
	    if(Val1 > 4095){Val1=0;}   
	    Val2 = 4096 - Val1;
	
	    pwm1.setPWM(0, Val1, Val2);
	    pwm1.setPWM(15, Val2, Val1);

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

multi_heap_info_t *info = 0;
heap_caps_get_info(info, MALLOC_CAP_8BIT);

Serial.print("   - Total free bytes in the heap. Equivalent to multi_free_heap_size(): ");
Serial.println(info->total_free_bytes);

Serial.print("   - Total bytes allocated to data in the heap: ");
Serial.println(info->total_allocated_bytes);

Serial.print("   - Size of largest free block in the heap. This is the largest malloc-able size: ");
Serial.println(info->largest_free_block);

Serial.print("   - Lifetime minimum free heap size. Equivalent to multi_minimum_free_heap_size(): ");
Serial.println(info->minimum_free_bytes);

Serial.print("   - Number of (variable size) blocks allocated in the heap: ");
Serial.println(info->allocated_blocks);

Serial.print("   - Number of (variable size) free blocks in the heap: ");
Serial.println(info->free_blocks);

Serial.print("   - size_t total_blocks: ");
Serial.println(info->total_blocks);

//----------------------------------------------------
// TESTING FUNCTIONS IN DISK TASK
//----------------------------------------------------

#include <TFT_eSPI.h>
#include "hmi.h"
#include <WiFi.h>
#include <WebServer.h>
#include <Update.h>
#include "wifi_plsi.h"

    if (I[0] && I[1] && I[2]){
        Serial.println("Formatting FFAT...");
        FFat.format();
        FFat.begin(false,"/ffat",1);
        Serial.print("Info FFAT Total Bytes: ");
        Serial.println(FFat.totalBytes());
        Serial.print("Info FFAT Used Bytes: ");
        Serial.println(FFat.freeBytes());
        FFat.end();
      delay(1000);
    }

    if (I[0]){
      delay(1000);
    }

    if (I[1]){
      FFat.begin(false,"/ffat",1);
      Serial.print("Info FFAT Total Bytes: ");
      Serial.println(FFat.totalBytes());
      Serial.print("Info FFAT Free Bytes: ");
      Serial.println(FFat.freeBytes());
      FFat.end();

      Serial.print("   - Free ESP Miniumn memory ever available: ");
      Serial.println (esp_get_minimum_free_heap_size());
      Serial.print("   - Free ESP memory xPort: ");
      Serial.println(xPortGetFreeHeapSize());
      delay(1000);
    }
    
    if (I[2]){

      delay(1000);
    }

    if (I[3]){
      //screenServer();
      delay(1000);
    }

    if (I[4]){
      FFat.begin(false,"/ffat",1);
      File root = FFat.open("/");
      File file = root.openNextFile();
      while(file){
        Serial.print("FILE: ");
        Serial.print(file.name());
        Serial.print("       SIZE: ");
        Serial.println(file.size());
        file = root.openNextFile();
      }
      FFat.end();

      delay(1000);
    }

    if(I[5]){

      delay(1000);
    }

    //----------------------------------------------------
    // TESTING FUNCTIONS END
    //----------------------------------------------------


    //--------------------------------------------------
    // Issue #56 
    // Prints the program serial port
    // This is used create an example using the PLsi editor 
    // and then copy and paste the code to the ladderExample
    //--------------------------------------------------
    if(M[510]){
      for(uint16_t n = 0; n < 20; n++){
        Serial.println("//--------------------------------------------------");
        Serial.print("// NETWORK ");
        Serial.println(n);
        Serial.println("//--------------------------------------------------");

        for(uint16_t r = 0; r < NET_ROWS; r++){
          for(uint16_t c = 0; c < NET_COLUMNS; c++){
            if(Networks[n].Cells[r][c].Code){
              Serial.print("Networks[");
              Serial.print(n);
              Serial.print("].Cells[");
              Serial.print(r);
              Serial.print("][");
              Serial.print(c);
              Serial.print("].Code = ");
              Serial.print(Networks[n].Cells[r][c].Code);
              Serial.println(";");

              Serial.print("Networks[");
              Serial.print(n);
              Serial.print("].Cells[");
              Serial.print(r);
              Serial.print("][");
              Serial.print(c);
              Serial.print("].Data = ");
              Serial.print(Networks[n].Cells[r][c].Data);
              Serial.println(";");

              Serial.print("Networks[");
              Serial.print(n);
              Serial.print("].Cells[");
              Serial.print(r);
              Serial.print("][");
              Serial.print(c);
              Serial.print("].Type = ");
              Serial.print(Networks[n].Cells[r][c].Type);
              Serial.println(";");
              Serial.println("");
            }
          }
          if(Networks[n].Bars[r]){
            Serial.print("Networks[");
            Serial.print(n);
            Serial.print("].Bars[");
            Serial.print(r);
            Serial.print("] = ");
            Serial.print(Networks[n].Bars[r]);
            Serial.println(";");
            Serial.println("");
          }
        }
      }
    }


