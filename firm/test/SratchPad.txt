-------------------------------------------------------------------------------------------------------------------------------------

                          result-oriented actions, individual talent and effective team work 

-------------------------------------------------------------------------------------------------------------------------------------

   - Time taken to save 1 Network to FFat: 3993
   - Time taken to save 1 Network to FFat: 4138
   - Time taken to save 1 Network to FFat: 4124











-------------------------------------------------------------------------------------------------------------------------------------
-------------- useful code ----------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
  tft.setTextSize(1);                              // Font size multiplier
  tft.setTextColor(WHITE2);                        // Font Color
  tft.setFreeFont(FSSB12);                         // Font selection
  tft.drawCentreString("Test Font", x, y, GFXFF);  // Print command, string will be centered for the given x value
  tft.drawString("Test Font", x, y, GFXFF);        // Print command, string will be left aligned
  tft.setTextFont(1);                              // Go back to default font

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

To configure logging output per module at runtime, add calls to the function esp_log_level_set() as follows:

esp_log_level_set("*", ESP_LOG_ERROR);        // set all components to ERROR level

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

  //--------------------------------------------------------------------------------
  // Return True if the User Program Slot has changed
  //--------------------------------------------------------------------------------

  uint16_t userProgramChanged(void) {
    if (userProgramOld != settings.ladder.UserProgram){
      userProgramOld = settings.ladder.UserProgram;
      return 1;
    }
    else {return 0;}
  }

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

  settings.ladder.UserProgram ++;
  if (settings.ladder.UserProgram > 7){
    settings.ladder.UserProgram = 0;
  }
  saveSettings();
  loadSelectedProgram = 1;
  delay(4000);
  Serial.print("Program changed to: ");
  Serial.println(settings.ladder.UserProgram);

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

unsigned long StartTime = micros();
    INSTRUCTION TO MEASURE TIME
unsigned long CurrentTime = micros();

Serial.print("   - Time taken to Perform XXX Operation: ");
Serial.println(CurrentTime - StartTime);

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

Serial.print("   - Free ESP Miniumn memory ever available: ");
Serial.println (esp_get_minimum_free_heap_size());
Serial.print("   - Free ESP memory xPort: ");
Serial.println(xPortGetFreeHeapSize());

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

#include "FS.h"
#include "SD.h"

Serial.print("Info SD Total Bytes: ");
Serial.println(uint32_t(SD.totalBytes()/1000));
Serial.print("Info SD Used Bytes: ");
Serial.println(uint32_t(SD.usedBytes()/1000));
Serial.print("Card Size: ");
Serial.println(uint32_t(SD.cardSize()/1000));
Serial.print("Card Type: ");
Serial.println(SD.cardType());
      
if (!SD.begin (SD_CS)){
  Serial.println("Card not present");
//   if (SD.cardType() == CARD_NONE){
}
else{
  Serial.println("Card is present. File created");
  
  File fSD = SD.open("/f.txt", "w");
        
  unsigned long CurrentTime = micros();
  Serial.print("Time taken to open file to write: ");
  Serial.println(CurrentTime - StartTime);

  // if mode is SeekSet, position is set to offset bytes from the beginning.
  // if mode is SeekCur, current position is moved by offset bytes.

  if(myFile.seek(pos-1, SeekSet)){
    Serial.println(" Position in File reached");
  }
  else{
    Serial.println(" Position in File Not reached");
  }
  Serial.print("Position in File: ");
  Serial.println(myFile.position());
  Serial.print("File Size: ");
  Serial.println(myFile.size());

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

String stringOne = "Hello String";                      // using a constant String
String stringOne =  String('a');                        // converting a constant char into a String
String stringTwo =  String("This is a string");         // converting a constant string into a String object
String stringOne =  String(stringTwo + " with more");   // concatenating two strings
String stringOne =  String(13);                         // using a constant integer
String stringOne =  String(analogRead(0), DEC);         // using an int and a base
String stringOne =  String(45, HEX);                    // using an int and a base (hexadecimal)
String stringOne =  String(255, BIN);                   // using an int and a base (binary)
String stringOne =  String(millis(), DEC);              // using a long and a base
String stringOne =  String(5.698, 3);                   // using a float and the decimal places 


-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

	// I2C
	#include <Arduino.h>
	#include <Wire.h>
	
	  Adafruit_PWMServoDriver pwm1 = Adafruit_PWMServoDriver(&Wire, 0x40);
	
	
setup	  pwm1.begin();
	  pwm1.setPWMFreq(1600);  // This is the maximum PWM frequency
	
loop	    Val1 += 10;
	    if(Val1 > 4095){Val1=0;}   
	    Val2 = 4096 - Val1;
	
	    pwm1.setPWM(0, Val1, Val2);
	    pwm1.setPWM(15, Val2, Val1);

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------

multi_heap_info_t *info = 0;
heap_caps_get_info(info, MALLOC_CAP_8BIT);

Serial.print("   - Total free bytes in the heap. Equivalent to multi_free_heap_size(): ");
Serial.println(info->total_free_bytes);

Serial.print("   - Total bytes allocated to data in the heap: ");
Serial.println(info->total_allocated_bytes);

Serial.print("   - Size of largest free block in the heap. This is the largest malloc-able size: ");
Serial.println(info->largest_free_block);

Serial.print("   - Lifetime minimum free heap size. Equivalent to multi_minimum_free_heap_size(): ");
Serial.println(info->minimum_free_bytes);

Serial.print("   - Number of (variable size) blocks allocated in the heap: ");
Serial.println(info->allocated_blocks);

Serial.print("   - Number of (variable size) free blocks in the heap: ");
Serial.println(info->free_blocks);

Serial.print("   - size_t total_blocks: ");
Serial.println(info->total_blocks);

